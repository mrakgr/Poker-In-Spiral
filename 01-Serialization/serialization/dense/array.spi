type st = st
type at = f32
type state = st * a st at
nominal pu a = {
    pickle : a -> state -> ()
    size : st
    unpickle : state -> a * st
    }

inl unit() = pu {
    size = 1
    pickle = fun () (i,s) => set s i 1
    unpickle = fun (i,s) => 
        inl x = index s i
        (), if x = 1 then 1 elif x = 0 then 0 else failwith "Unpickling failure. The unit type should always be either be active or inactive."
    }

inl int forall t {number;int}. size : pu t =
    pu {size
        pickle = fun x (i,s : state) =>
            if 0 <= x && conv_int x < size then set s (i + conv_int x) 1
            else failwith $"f'Pickling failure. Int value out of bounds. Got: {!x} Size: {!size}'"
        unpickle = fun (from,s : state) =>
            inl ~(from,nearTo) = from, from+size
            join
                inl case,c =
                    loop.for {from nearTo} (fun i (case,c) =>
                        inl x = index s i
                        if x = 0 then case,c
                        elif x = 1 then i,c+1
                        else failwith "Unpickling failure. The int type must either be active or inactive."
                        ) (0,0)
                if 1 < c then failwith "Unpickling failure. Too many active indices in the one-hot vector."
                conv_int (case - from), c
        }

// Allows negative ints. Should not be used in arrays or unions.
inl bin_sint forall t {number;int}. size : pu t =
    assert (1 <= size && size <= 63) "The field size has to be in the [1,63] range."
    pu {size
        pickle = fun ~x ~(i,s : state) => join
            inl max_x = 
                inl q = 1 <<< (i32 size - 1)
                q + (q - 1)
            inl x = i64 x
            if -max_x <= x && x < max_x then
                loop.for {from=0; nearTo=size} (fun i' x =>
                    inl q = 1 <<< i32 (size - i' - 1)
                    set s (i + conv_int i') (f32 (x / q))
                    x % q
                    ) x |> ignore
            else failwith $"f'Pickle failure. Bin sint value out of bounds. Got: {!x} Size: {!size}'"
        unpickle = fun ~(from,s : state) => join
            loop.for {from=0; nearTo=size} (fun i' w =>
                inl x = index s (from + i')
                if x = 0 || x = 1 then w + (conv_num x <<< i32 (size - i' - 1))
                else failwith "Unpickling failure. The int type must either be active or inactive."
                ) 0
            |> fun x => x, 1
        }

// Unlike int which stores the value as a one-hot vector, this one stores it as a binary value.
// The value 0 is stored as 1, 1 as 2 and so on. During unpickling the zero vector is considered inactive.
// The max value is taken up by that inactive vactor. Hence the actual capacity is
// `2 ** size - 1` rather than `2 ** size`.
inl bin_int forall t {number;int}. size : pu t =
    assert (1 <= size && size <= 64) "The field size has to be in the [1,64] range."
    pu {size
        pickle = fun ~x ~(i,s : state) => join
            inl max_x = 
                inl q = 1 <<< (i32 size - 1)
                q + (q - 1)
            if 0 <= x && u64 x < max_x then
                loop.for {from=0; nearTo=size} (fun i' x =>
                    inl q = 1 <<< i32 (size - i' - 1)
                    set s (i + conv_int i') (f32 (x / q))
                    x % q
                    ) (x + 1) |> ignore
            else failwith $"f'Pickle failure. Bin int value out of bounds. Got: {!x} Size: {!max_x}'"
        unpickle = fun ~(from,s : state) => join
            loop.for {from=0; nearTo=size} (fun i' w =>
                inl x = index s (from + i')
                if x = 0 || x = 1 then w + (conv_num x <<< i32 (size - i' - 1))
                else failwith "Unpickling failure. The bin int type must either be active or inactive."
                ) 0
            |> fun x => x - 1, if 0 < x then 1 else 0
        }

inl array forall t. size (pu el : pu t) : pu (a st t) =
    inl unpickle (~from,s : state) : a _ _ * _ =
        inl tmp : a _ _ = create size
        inl c = 
            inl c = index s from
            if c = 1 || c = 0 then conv_num c else failwith "Unpickle failure. The array emptiness flag should be 1 or 0."
        inl c' = 
            inl from = from + 1
            loop.for {from=0; nearTo=size} (fun i c =>
                inl from = from + i * el.size
                inl x, c' = el.unpickle (from,s)
                if i = c then
                    if c' = 1 then set tmp i x
                    c + c'
                else
                    if c' <> 0 then failwith "Unpickle failure. Expected an inactive subsequence in the array unpickler."
                    c
                ) 0
        if c = 1 && 0 < c' then failwith "Unpickle failure. Empty arrays should not have active elements."
        am.init c' (index tmp), min 1 (c + c')
    inl pickle x (i,s : state) =
        if size < length x then failwith "Pickle failure. The given array is too large."
        if length x = 0 then set s i 1
        inl i = i + 1
        am.iteri (fun idx x => el.pickle x (i + idx * el.size,s)) x
    pu { pickle unpickle size = size * el.size + 1 }

inl pair (pu a') (pu b') =
    pu {size = a'.size + b'.size
        pickle = fun (a,b) (i,s) => a'.pickle a (i,s) . b'.pickle b (i + a'.size, s)
        unpickle = fun (i,s) => 
            inl x,c' = a'.unpickle (i,s)
            inl x',c'' = b'.unpickle (i + a'.size, s)
            inl c = c' + c''
            if c = 1 then failwith "Unpickling failure. Two sides of a pair should either all be active or inactive."
            (x,x'), c / 2
        }
inl (**) a b = pair a b

inl wrap {inp=a out=b} (pu p) =
    pu {size = p.size
        pickle = fun x state => p.pickle (a x) state
        unpickle = fun state => inl x,c = p.unpickle state in b x,c
        }

inl alt forall t r. (l : r) : pu t = 
    inl zero = 0 : st
    inl one = 1 : st
    inl _ = real // Typechecking.
        open real_core
        union_to_record `t forall r'. =>
        assert (record_type_length `r' = record_type_length `r) "The number of keys in the record should be the same as in the union type."
        record_type_iter (fun k => forall v. =>
            record_type_try_find `r' k
                (forall v'. => typecase v' * v with ~x * pu ~x => ())
                (fun () => error_type "The record's keys must match those of the union.")
            ) `r
    inl offsets, size = real
        open real_core
        record_fold (fun {state=(m,s) key value} => inl (pu p) = value in {m with $key=s}, s + p.size) ({},zero) l
    inl unpickle (i,s : state) : t * st = real
        open real_core
        inl x = 
            record_type_map (fun k => forall v. =>
                inl (pu p) = l k 
                inl x,c = p.unpickle (i + offsets k,s)
                nominal_create `t (k,x), c
                ) `r
        inl case, c =
            record_fold (fun {state key value} => 
                match state with
                | () => value
                | (case,c) =>
                    inl case', c' = value
                    (if c' = one then case' else case), c + c'
                ) () x
        if one < c then failwith `(()) "Unpickling failure. Only a single case of an union type should be active at most."
        case, c
    inl pickle (m : t) (i,s : state) : () = real
        open real_core
        unbox m (fun (k,v) => inl (pu p) = l k in p.pickle v (i + offsets k,s))
    pu {size pickle unpickle}
    
inl option forall t. (a : pu t) : pu (option t) = alt { Some = a; None = unit() }
inl result forall t y. (a : pu t) (b : pu y) : pu (result t y) = alt { Ok = a; Error = b }
inl (++) forall t y. (a : pu t) (b : pu y) : pu (choice2 t y) = alt { C1of2 = a; C2of2 = b }

inl size (pu p) = p.size

nominal binary_array t = a st at
inl serialize forall t. (pu p : pu t) ~(x : t) : binary_array t =
    inl ar = create p.size
    loop.for' {from=0; nearTo=length ar} (fun i => set ar i 0)
    p.pickle x (0,ar)
    binary_array ar

inl deserialize forall t. (pu p : pu t) ~(binary_array x : binary_array t) : t =
    inl x,c = p.unpickle (0,x)
    if c <> 1 then failwith "Invalid format."
    x