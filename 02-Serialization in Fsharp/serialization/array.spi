type state dim = dim * a dim f32
nominal pu dim el = {
    pickle : el -> state dim -> ()
    size : dim
    unpickle : state dim -> el * dim
    }

inl unit forall dim{number}. : pu dim () = pu {
    size = 1
    pickle = fun () (i,s) => set s i 1
    unpickle = fun (i,s) =>
        inl x = index s i
        if not (x = 0 || x = 1) then failwith "Unpickling failure. The unit type should always be either be active or inactive."
        (), conv x
    }

inl int forall dim {number}. size : pu dim dim =
    pu {size
        pickle = fun x (i,s) =>
            if not (0 <= x && x < size) then failwith $"$\"Pickling failure. Int value out of bounds. Got: {!x} Size: {!size}\""
            set s (i + x) 1
        unpickle = fun (~from,s) =>
            inl nearTo = from+size
            join
                inl case,c =
                    loop.for {from nearTo} (fun i (case,c) =>
                        inl x = index s i
                        if x = 0 then case,c
                        elif x = 1 then i,c+1
                        else failwith "Unpickling failure. The int type must either be active or inactive."
                        ) (0,0)
                assert (c <= 1) "Unpickling failure. Too many active indices in the one-hot vector."
                case - from, c
        }

// Unlike int which stores the value as a one-hot vector, this one stores it as a binary value.
// The value 0 is stored as 1, 1 as 2 and so on. During unpickling the zero vector is considered inactive.
// The max value is taken up by that inactive vactor. Hence the actual capacity is
// `2 ** size - 1` rather than `2 ** size`.
inl bin_int forall dim {number; int}. size : pu dim dim =
    inl size_max : dim = real
        typecase dim with
        | i8 => 7i8 | u8 => 8u8
        | i16 => 15i16 | u16 => 16u16
        | i32 => 31i32 | u32 => 32u32
        | i64 => 63i64 | u64 => 64u64
    if not (1 <= size && size <= size_max) then failwith $"$\"The field size has to be in the [1,!size_max] range.\""
    pu {size
        pickle = fun ~x (~i,s) => join
            inl max_x : dim = 
                inl q = 1 <<< conv (size - 1)
                q + (q - 1)
            if not (0 <= x && x < max_x) then failwith $"$\"Pickle failure. Bin int value out of bounds. Got: {!x} Size: {!max_x}\""
            loop.for {from=0; nearTo=size} (fun i' x =>
                inl q = 1 <<< conv (size - i' - 1)
                set s (i + i') (conv (x / q))
                x % q
                ) (x + 1) |> ignore
        unpickle = fun ~from,s => join
            loop.for {from=0; nearTo=size} (fun i' w =>
                inl x = index s (from + i')
                assert (x = 0 || x = 1) "Unpickling failure. The bin int type must either be active or inactive."
                w + (conv x <<< conv (size - i' - 1))
                ) 0
            |> fun x => x - 1, if 0 < x then 1 else 0
        }

inl array forall dim {int; number} t. size (el : pu dim t) : pu dim (a dim t) =
    pu {size = 1 + size * el.size
        pickle = fun x (i,s) =>
            assert (length x <= size) "Pickling failure. The given array is too large."
            if length x = 0 then set s i 1
            inl i = i + 1
            am.iteri (fun idx x => el.pickle x (i + idx * el.size,s)) x
        unpickle = fun (from,s) =>
            inl tmp : a _ _ = create size
            inl c_empty : dim = 
                inl c = index s from
                assert (c = 0 || c = 1) "Unpickling failure. The array emptiness flag should be 1 or 0."
                conv c
            inl tmp_len = 
                inl ~from = from + 1
                loop.for {from=0; nearTo=size} (fun i len =>
                    inl x, c_sub = el.unpickle (from + i * el.size,s)
                    if i = len then
                        if c_sub = 1 then set tmp i x
                        len + c_sub
                    else
                        assert (c_sub = 0) "Unpickling failure. Expected an inactive subsequence in the array unpickler."
                        len
                    ) 0
            assert (not (c_empty = 1 && 0 < tmp_len)) "Unpickling failure. Empty arrays should not have active elements."
            am.init tmp_len (index tmp), c_empty ||| min 1 tmp_len
        }

inl pair (pu a') (pu b') =
    pu {size = a'.size + b'.size
        pickle = fun (a,b) (i,s) => a'.pickle a (i,s) . b'.pickle b (i + a'.size, s)
        unpickle = fun (i,s) => 
            inl x,c' = a'.unpickle (i,s)
            inl x',c'' = b'.unpickle (i + a'.size, s)
            inl c = c' + c''
            if c = 1 then failwith "Unpickling failure. Two sides of a pair should either all be active or inactive."
            (x,x'), if c = 0 then 0 else 1
        }
inl (**) a b = pair a b

inl wrap {inp=a out=b} (pu p) =
    pu {size = p.size
        pickle = fun x state => p.pickle (a x) state
        unpickle = fun state => inl x,c = p.unpickle state in b x,c
        }

inl alt forall dim {number; int} t r. (l : r) : pu dim t = 
    inl zero = 0 : dim
    inl one = 1 : dim
    inl _ = real // Typechecking.
        open real_core
        union_to_record `t forall r'. =>
        assert (record_type_length `r' = record_type_length `r) "The number of keys in the record should be the same as in the union type."
        record_type_iter (fun k => forall v. =>
            record_type_try_find `r' k
                (forall v'. => typecase v' * v with ~x * pu dim ~x => ())
                (fun () => error_type "The record's keys must match those of the union.")
            ) `r
    inl offsets, size = real
        open real_core
        record_fold (fun {state=(m,s) key value} => inl (pu p) = value in {m with $key=s}, s + p.size) ({},zero) l
    inl unpickle (i,s : state dim) : t * dim = real
        open real_core
        inl x = 
            record_type_map (fun k => forall v. =>
                inl (pu p) = l k 
                inl x,c = p.unpickle (i + offsets k,s)
                nominal_create `t (k,x), c
                ) `r
        inl case, c =
            record_fold (fun {state key value} => 
                match state with
                | () => value
                | (case,c) =>
                    inl case', c' = value
                    (if c' = one then case' else case), c + c'
                ) () x
        assert (c <= one) "Unpickling failure. Only a single case of an union type should be active at most."
        case, c
    inl pickle (m : t) (i,s : state dim) : () = real
        open real_core
        unbox m (fun (k,v) => inl (pu p) = l k in p.pickle v (i + offsets k,s))
    pu {size pickle unpickle}
    
inl option forall dim {number; int} t. (a : pu dim t) : pu dim (option t) = alt {Some = a; None = unit : pu dim _}
inl result forall dim {number; int} t y. (a : pu dim t) (b : pu dim y) : pu dim (result t y) = alt {Ok = a; Error = b}
inl (++) forall dim {number; int} t y. (a : pu dim t) (b : pu dim y) : pu dim (choice2 t y) = alt {C1of2 = a; C2of2 = b}

inl size (pu p) = p.size

inl serialize forall dim {number; int} t. (p : pu dim t) ~(x : t) : a dim f32 = join
    inl ar = create p.size
    p.pickle x (0,ar)
    ar

inl deserialize forall dim {number; int} t. (p : pu dim t) (x : a dim f32) : t = join
    inl x,c = p.unpickle (0,x)
    assert (c = 1) "Invalid format."
    x

inl round_trip_assert forall dim {number; int} t. (p : pu dim t) ~(x : t) : () = join
    assert (x = deserialize p (serialize p x)) "PU round trip failed."